"use strict";(self.webpackChunkwayang_website=self.webpackChunkwayang_website||[]).push([[9979],{8653:(a,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>s,toc:()=>p});var r=n(5893),o=n(1151);const t={title:"Adding an operator in Wayang",sidebar_position:7,id:"adding-operators"},i="Adding new operators in Wayang",s={id:"guide/adding-operators",title:"Adding an operator in Wayang",description:"\x3c!--",source:"@site/docs/guide/add-an-operator.md",sourceDirName:"guide",slug:"/guide/adding-operators",permalink:"/docs/guide/adding-operators",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Adding an operator in Wayang",sidebar_position:7,id:"adding-operators"},sidebar:"guideSidebar",previous:{title:"Developing in Wayang",permalink:"/docs/guide/developing-in-wayang"},next:{title:"Data processing optimizer",permalink:"/docs/guide/optimizer"}},d={},p=[{value:"Step 1: Add a Wayang operator",id:"step-1-add-a-wayang-operator",level:2},{value:"Step 2: Add the (platform-specific) execution operators",id:"step-2-add-the-platform-specific-execution-operators",level:2},{value:"Step 3: Add mappings",id:"step-3-add-mappings",level:2},{value:"Step 4: Expand the Java scala-like API",id:"step-4-expand-the-java-scala-like-api",level:2}];function c(a){const e={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",p:"p",...(0,o.a)(),...a.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.h1,{id:"adding-new-operators-in-wayang",children:"Adding new operators in Wayang"}),"\n",(0,r.jsxs)(e.p,{children:["This guide shows the ",(0,r.jsx)(e.em,{children:"3 steps"})," that developers need to follow if they want to add new operators in Wayang.\nWe use the Map operator as an example."]}),"\n",(0,r.jsx)(e.h2,{id:"step-1-add-a-wayang-operator",children:"Step 1: Add a Wayang operator"}),"\n",(0,r.jsxs)(e.p,{children:["Wayang operators are located under the ",(0,r.jsx)(e.code,{children:"wayang-basic"})," in the ",(0,r.jsx)(e.code,{children:"org.apache.wayang.basic.operators"})," package. ",(0,r.jsx)("br",{}),"\nAn operator needs to extend from one of the following abstract classes: ",(0,r.jsx)(e.code,{children:"UnaryToUnaryOperator"}),", ",(0,r.jsx)(e.code,{children:"BinaryToUnaryOperator"}),", ",(0,r.jsx)(e.code,{children:"UnarySource"}),", ",(0,r.jsx)(e.code,{children:"UnarySink"}),".",(0,r.jsx)("br",{}),"\nFor a unary to unary operator, see for example ",(0,r.jsx)(e.a,{href:"https://github.com/apache/incubator-wayang/blob/main/wayang-commons/wayang-basic/src/main/java/org/apache/wayang/basic/operators/MapOperator.java",children:"here"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:["For enhanced performance in Wayang, consider adding a cardinality estimator by overriding the ",(0,r.jsx)(e.code,{children:"createCardinalityEstimator()"})," function as ",(0,r.jsx)(e.a,{href:"https://github.com/apache/incubator-wayang/blob/main/wayang-commons/wayang-basic/src/main/java/org/apache/wayang/basic/operators/MapOperator.java#L112C43-L112C70",children:"here"}),"."]}),"\n",(0,r.jsx)(e.h2,{id:"step-2-add-the-platform-specific-execution-operators",children:"Step 2: Add the (platform-specific) execution operators"}),"\n",(0,r.jsxs)(e.p,{children:["Execution operators are located under the corresponding module of ",(0,r.jsx)(e.code,{children:"wayang-platforms"}),". For instance, Java execution operators are located in the ",(0,r.jsx)(e.code,{children:"org.apache.wayang.java.operators"})," package of the ",(0,r.jsx)(e.code,{children:"wayang-java"})," module.",(0,r.jsx)("br",{}),"\nAn execution operator needs to extend from its corresponding Wayang operator and implement the corresponding platform operator interface.",(0,r.jsx)("br",{}),"\nFor the above ",(0,r.jsx)(e.code,{children:"MapOperator"}),", the following is the corresponding ",(0,r.jsx)(e.a,{href:"https://github.com/apache/incubator-wayang/blob/main/wayang-platforms/wayang-java/src/main/java/org/apache/wayang/java/operators/JavaMapOperator.java",children:(0,r.jsx)(e.code,{children:"JavaMapOperator"})}),"."]}),"\n",(0,r.jsxs)(e.p,{children:["For enhanced performance in Wayang, consider adding a load function as well:",(0,r.jsx)("br",{}),"\nFor this you need to overwrite the ",(0,r.jsx)(e.code,{children:"getLoadProfileEstimatorConfigurationKey()"})," function and provide the right key that will then be read from a properties file.\nFor the JavaMapOperator it's: wayang.java.map.load. Then add in the corresponding properties file (e.g., ",(0,r.jsx)(e.a,{href:"https://github.com/apache/incubator-wayang/blob/main/wayang-platforms/wayang-java/src/main/resources/wayang-java-defaults.properties",children:"this"})," is for the java executor) the template which is the mathematical formula that represents the cost of this operator and an instantiation of it. See ",(0,r.jsx)(e.a,{href:"https://github.com/apache/incubator-wayang/blob/main/wayang-platforms/wayang-java/src/main/resources/wayang-java-defaults.properties#L25",children:"here"})," for the example of the map operator."]}),"\n",(0,r.jsx)(e.h2,{id:"step-3-add-mappings",children:"Step 3: Add mappings"}),"\n",(0,r.jsxs)(e.p,{children:["Create mappings from the Wayang operator to the platform-specific execution operators. ",(0,r.jsx)("br",{}),"\nThe mappings are located in the corresponding execution module in the ",(0,r.jsx)(e.code,{children:"org.apache.wayang.java.operators"})," package.",(0,r.jsx)("br",{}),"\nFor the above ",(0,r.jsx)(e.code,{children:"MapOperator"})," and ",(0,r.jsx)(e.code,{children:"JavaMapOperator"}),", see ",(0,r.jsx)(e.a,{href:"https://github.com/apache/incubator-wayang/blob/main/wayang-platforms/wayang-java/src/main/java/org/apache/wayang/java/mapping/MapMapping.java",children:"here"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:["After that you need to declare this mapping in Wayang in the corresponding ",(0,r.jsx)(e.a,{href:"https://github.com/apache/incubator-wayang/blob/main/wayang-platforms/wayang-java/src/main/java/org/apache/wayang/java/mapping/Mappings.java#L37",children:(0,r.jsx)(e.code,{children:"Mappings"})})," class."]}),"\n",(0,r.jsx)(e.h2,{id:"step-4-expand-the-java-scala-like-api",children:"Step 4: Expand the Java scala-like API"}),"\n",(0,r.jsxs)(e.p,{children:["Once you created a new operator you need to expose it to the API so that users can use it as a function in the dataflow job they create. For this, you need to go to the module ",(0,r.jsx)(e.code,{children:"wayang-api/wayang-api-scala-java"})," and expand the ",(0,r.jsx)(e.code,{children:"JavaPlanBuilder.scala"})," file to include a new source operator or the ",(0,r.jsx)(e.code,{children:"DataQuantaBuilder"})," for non-source operators."]})]})}function h(a={}){const{wrapper:e}={...(0,o.a)(),...a.components};return e?(0,r.jsx)(e,{...a,children:(0,r.jsx)(c,{...a})}):c(a)}},1151:(a,e,n)=>{n.d(e,{Z:()=>s,a:()=>i});var r=n(7294);const o={},t=r.createContext(o);function i(a){const e=r.useContext(t);return r.useMemo((function(){return"function"==typeof a?a(e):{...e,...a}}),[e,a])}function s(a){let e;return e=a.disableParentContext?"function"==typeof a.components?a.components(o):a.components||o:i(a.components),r.createElement(t.Provider,{value:e},a.children)}}}]);